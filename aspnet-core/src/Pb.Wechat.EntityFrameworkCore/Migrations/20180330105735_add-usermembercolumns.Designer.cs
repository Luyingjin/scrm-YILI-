// <auto-generated />
using Abp.Authorization;
using Abp.BackgroundJobs;
using Abp.Notifications;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using Pb.Wechat.Chat;
using Pb.Wechat.EntityFrameworkCore;
using Pb.Wechat.Friendships;
using Pb.Wechat.MultiTenancy.Payments;
using System;

namespace Pb.Wechat.Migrations
{
    [DbContext(typeof(AbpZeroTemplateDbContext))]
    [Migration("20180330105735_add-usermembercolumns")]
    partial class addusermembercolumns
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Edition");
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(256);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000);

                    b.Property<string>("Exception")
                        .HasMaxLength(2000);

                    b.Property<int>("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256);

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024);

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsGranted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<long?>("UserLinkId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("AbpUserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(256);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<byte>("Result");

                    b.Property<string>("TenancyName")
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("AbpUserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsAbandoned");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576);

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime?>("LastTryTime");

                    b.Property<DateTime>("NextTryTime");

                    b.Property<byte>("Priority");

                    b.Property<short>("TryCount");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Abp.IdentityServer4.PersistedGrantEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("AbpPersistedGrants");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpLanguages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(67108864);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("AbpLanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("ExcludedUserIds")
                        .HasMaxLength(131072);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<string>("TenantIds")
                        .HasMaxLength(131072);

                    b.Property<string>("UserIds")
                        .HasMaxLength(131072);

                    b.HasKey("Id");

                    b.ToTable("AbpNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("AbpNotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AbpTenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<Guid>("TenantNotificationId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("AbpUserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long?>("ParentId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("Pb.Wechat.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsStatic");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("Pb.Wechat.Authorization.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AuthenticationSource")
                        .HasMaxLength(64);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(328);

                    b.Property<string>("GoogleAuthenticatorKey");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<bool>("IsLockoutEnabled");

                    b.Property<bool>("IsPhoneNumberConfirmed");

                    b.Property<bool>("IsTwoFactorEnabled");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime?>("LockoutEndDateUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(328);

                    b.Property<string>("PhoneNumber");

                    b.Property<Guid?>("ProfilePictureId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("ShouldChangePasswordOnNextLogin");

                    b.Property<string>("SignInToken");

                    b.Property<DateTime?>("SignInTokenExpireTimeUtc");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("Pb.Wechat.Chat.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(4096);

                    b.Property<int>("ReadState");

                    b.Property<int>("Side");

                    b.Property<int?>("TargetTenantId");

                    b.Property<long>("TargetUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TargetTenantId", "TargetUserId", "ReadState");

                    b.HasIndex("TargetTenantId", "UserId", "ReadState");

                    b.HasIndex("TenantId", "TargetUserId", "ReadState");

                    b.HasIndex("TenantId", "UserId", "ReadState");

                    b.ToTable("AppChatMessages");
                });

            modelBuilder.Entity("Pb.Wechat.CustomerServiceOnlines.CustomerServiceOnline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("InviteExpireTime");

                    b.Property<string>("InviteStatus");

                    b.Property<string>("InviteWx");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("KfAccount");

                    b.Property<string>("KfHeadingUrl");

                    b.Property<string>("KfId");

                    b.Property<string>("KfNick");

                    b.Property<string>("KfPassWord");

                    b.Property<string>("KfWx");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LocalHeadFilePath");

                    b.Property<string>("LocalHeadingUrl");

                    b.Property<int>("MpID");

                    b.Property<string>("PreKfAccount");

                    b.Property<string>("PublicNumberAccount");

                    b.HasKey("Id");

                    b.ToTable("CustomerServiceOnlines");
                });

            modelBuilder.Entity("Pb.Wechat.CustomerServiceResponseTexts.CustomerServiceResponseText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MpID");

                    b.Property<string>("ResponseText");

                    b.Property<string>("ResponseType");

                    b.HasKey("Id");

                    b.ToTable("CustomerServiceResponseTexts");
                });

            modelBuilder.Entity("Pb.Wechat.CustomerServiceWorkTimes.CustomerServiceWorkTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AfternoonEndHour");

                    b.Property<string>("AfternoonEndMinute");

                    b.Property<string>("AfternoonStartHour");

                    b.Property<string>("AfternoonStartMinute");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("MorningEndHour");

                    b.Property<string>("MorningEndMinute");

                    b.Property<string>("MorningStartHour");

                    b.Property<string>("MorningStartMinute");

                    b.Property<int>("MpID");

                    b.Property<string>("WeekDay");

                    b.HasKey("Id");

                    b.ToTable("CustomerServiceWorkTimes");
                });

            modelBuilder.Entity("Pb.Wechat.Friendships.Friendship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid?>("FriendProfilePictureId");

                    b.Property<string>("FriendTenancyName");

                    b.Property<int?>("FriendTenantId");

                    b.Property<long>("FriendUserId");

                    b.Property<string>("FriendUserName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FriendTenantId", "FriendUserId");

                    b.HasIndex("FriendTenantId", "UserId");

                    b.HasIndex("TenantId", "FriendUserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AppFriendships");
                });

            modelBuilder.Entity("Pb.Wechat.MpAccounts.MpAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessToken");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("AppId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("AppSecret")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("CertPassword")
                        .HasMaxLength(50);

                    b.Property<string>("CertPhysicalPath")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EncodingAESKey")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("ExpireTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("MchID")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Remark");

                    b.Property<string>("TaskAccessToken");

                    b.Property<string>("Token")
                        .HasMaxLength(200);

                    b.Property<string>("WxAccount");

                    b.Property<string>("WxPayAppSecret")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("Name", "AccountType", "Remark", "AppId");

                    b.ToTable("MpAccounts");
                });

            modelBuilder.Entity("Pb.Wechat.MpApiTokens.MpApiToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApiType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("EndTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ParentId");

                    b.Property<DateTime>("StartTime");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ParentId", "ApiType", "Token", "StartTime", "EndTime");

                    b.ToTable("MpApiTokens");
                });

            modelBuilder.Entity("Pb.Wechat.MpArticleInsideImages.MpArticleInsideImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArticleGrid");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LocalImageUrl");

                    b.Property<int>("MpID");

                    b.Property<string>("WxImageUrl");

                    b.HasKey("Id");

                    b.ToTable("MpArticleInsideImages");
                });

            modelBuilder.Entity("Pb.Wechat.MpBabyTexts.MpBabyText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BabyAge");

                    b.Property<string>("BabyText");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MpID");

                    b.HasKey("Id");

                    b.ToTable("MpBabyTexts");
                });

            modelBuilder.Entity("Pb.Wechat.MpChannels.MpChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ArticleGroupID");

                    b.Property<string>("ArticleGroupMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("ArticleGroupName")
                        .HasMaxLength(500);

                    b.Property<int?>("ArticleID");

                    b.Property<string>("ArticleMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("ArticleName")
                        .HasMaxLength(500);

                    b.Property<string>("ChannelType");

                    b.Property<string>("Code");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("EndTime");

                    b.Property<string>("EventKey");

                    b.Property<string>("FilePath");

                    b.Property<string>("FileUrl");

                    b.Property<int?>("ImageID");

                    b.Property<string>("ImageMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("ImageName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("IsMcChannel");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MpID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("PushActivityName")
                        .HasMaxLength(500);

                    b.Property<string>("ReplyType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("StartTime");

                    b.Property<string>("Ticket");

                    b.Property<int>("ValidityDay");

                    b.Property<int?>("VideoID");

                    b.Property<string>("VideoMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("VideoName")
                        .HasMaxLength(500);

                    b.Property<int?>("VoiceID");

                    b.Property<string>("VoiceMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("VoiceName")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("MpChannels");
                });

            modelBuilder.Entity("Pb.Wechat.MpEventClickViewLogs.MpEventClickViewLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EventKey");

                    b.Property<string>("EventType");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MpID");

                    b.Property<string>("MsgID");

                    b.Property<string>("OpenID");

                    b.HasKey("Id");

                    b.ToTable("MpEventClickViewLogs");
                });

            modelBuilder.Entity("Pb.Wechat.MpEventRequestMsgLogs.MpEventRequestMsgLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AUrl");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("MediaId");

                    b.Property<int>("MpID");

                    b.Property<string>("MsgId");

                    b.Property<string>("MsgType");

                    b.Property<string>("OpenID");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("MpEventRequestMsgLogs");
                });

            modelBuilder.Entity("Pb.Wechat.MpEvents.MpEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ArticleGroupID");

                    b.Property<string>("ArticleGroupMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("ArticleGroupName")
                        .HasMaxLength(500);

                    b.Property<int?>("ArticleID");

                    b.Property<string>("ArticleMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("ArticleName")
                        .HasMaxLength(500);

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EventCode")
                        .HasMaxLength(200);

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("ImageID");

                    b.Property<string>("ImageMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("ImageName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MpID");

                    b.Property<string>("ReplyType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("VideoID");

                    b.Property<string>("VideoMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("VideoName")
                        .HasMaxLength(500);

                    b.Property<int?>("VoiceID");

                    b.Property<string>("VoiceMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("VoiceName")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("MpEvents");
                });

            modelBuilder.Entity("Pb.Wechat.MpEventScanLogs.MpEventScanLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EventContent");

                    b.Property<string>("EventType");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MpID");

                    b.Property<string>("MsgID");

                    b.Property<string>("OpenID");

                    b.HasKey("Id");

                    b.ToTable("MpEventScanLogs");
                });

            modelBuilder.Entity("Pb.Wechat.MpFans.MpFan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChannelID");

                    b.Property<string>("ChannelName")
                        .HasMaxLength(200);

                    b.Property<string>("ChannelType")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<string>("Country")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("FirstSubscribeTime");

                    b.Property<int?>("GroupID");

                    b.Property<string>("GroupName");

                    b.Property<string>("HeadImgUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFans");

                    b.Property<string>("Language");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MemberID");

                    b.Property<int>("MpID");

                    b.Property<string>("NickName")
                        .HasMaxLength(100);

                    b.Property<string>("OpenID")
                        .HasMaxLength(50);

                    b.Property<string>("Province")
                        .HasMaxLength(100);

                    b.Property<string>("Sex");

                    b.Property<DateTime?>("SubscribeTime");

                    b.Property<string>("UnionID");

                    b.Property<string>("UnionName");

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<int?>("WxGroupID");

                    b.HasKey("Id");

                    b.ToTable("MpFans");
                });

            modelBuilder.Entity("Pb.Wechat.MpFansGroupMaps.MpFansGroupMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("FansID");

                    b.Property<int>("GroupID");

                    b.Property<string>("GroupName");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MpID");

                    b.HasKey("Id");

                    b.ToTable("MpFansGroupMaps");
                });

            modelBuilder.Entity("Pb.Wechat.MpGroupItems.MpGroupItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BaySex");

                    b.Property<DateTime>("BeginBabyBirthday");

                    b.Property<int>("BeginPointsBalance");

                    b.Property<string>("ChannelID");

                    b.Property<string>("ChannelName");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime>("EndBabyBirthday");

                    b.Property<int>("EndPointsBalance");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("IsMember");

                    b.Property<string>("LastBuyProduct");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("MemberCategory");

                    b.Property<string>("MotherType");

                    b.Property<int>("MpID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("OfficialCity");

                    b.Property<string>("OrganizeCity");

                    b.Property<int>("ParentID");

                    b.Property<string>("TargetID");

                    b.Property<string>("TargetName");

                    b.HasKey("Id");

                    b.ToTable("MpGroupItems");
                });

            modelBuilder.Entity("Pb.Wechat.MpGroups.MpGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChildCount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("FansCount");

                    b.Property<string>("FullPath");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("Length");

                    b.Property<int>("MpID");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("ParentID");

                    b.Property<string>("ParentName");

                    b.Property<int>("WxGroupID");

                    b.HasKey("Id");

                    b.ToTable("MpGroups");
                });

            modelBuilder.Entity("Pb.Wechat.MpKeyWordReplys.MpKeyWordReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ArticleGroupID");

                    b.Property<string>("ArticleGroupMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("ArticleGroupName")
                        .HasMaxLength(500);

                    b.Property<int?>("ArticleID");

                    b.Property<string>("ArticleMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("ArticleName")
                        .HasMaxLength(500);

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("ImageID");

                    b.Property<string>("ImageMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("ImageName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("KeyWord")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MpID");

                    b.Property<string>("ReplyType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("VideoID");

                    b.Property<string>("VideoMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("VideoName")
                        .HasMaxLength(500);

                    b.Property<int?>("VoiceID");

                    b.Property<string>("VoiceMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("VoiceName")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("KeyWord", "MpID");

                    b.ToTable("MpKeyWordReplys");
                });

            modelBuilder.Entity("Pb.Wechat.MpMediaArticleGroups.MpMediaArticleGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("MediaID");

                    b.Property<int>("MpID");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("MpMediaArticleGroups");
                });

            modelBuilder.Entity("Pb.Wechat.MpMediaArticleGroups.MpMediaArticleGroupItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArticleID");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("GroupID");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MpID");

                    b.Property<int?>("SortIndex");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("MpMediaArticleGroupItems");
                });

            modelBuilder.Entity("Pb.Wechat.MpMediaArticles.MpMediaArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AUrl")
                        .HasMaxLength(200);

                    b.Property<string>("ArticleGrid");

                    b.Property<string>("Author")
                        .HasMaxLength(500);

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Description");

                    b.Property<int>("EnableComment");

                    b.Property<string>("FilePathOrUrl")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("MediaID")
                        .HasMaxLength(200);

                    b.Property<int>("MpID");

                    b.Property<int>("OnlyFansComment");

                    b.Property<string>("PicFileID")
                        .HasMaxLength(500);

                    b.Property<string>("PicMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("ShowPic")
                        .HasMaxLength(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("WxContent");

                    b.HasKey("Id");

                    b.ToTable("MpMediaArticles");
                });

            modelBuilder.Entity("Pb.Wechat.MpMediaImages.MpMediaImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("FileID");

                    b.Property<string>("FilePathOrUrl")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("MediaID")
                        .HasMaxLength(200);

                    b.Property<int>("MediaImageType");

                    b.Property<string>("MediaImageTypeName");

                    b.Property<int>("MpID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("MpMediaImages");
                });

            modelBuilder.Entity("Pb.Wechat.MpMediaImageTypes.MpMediaImageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("MediaTypeName");

                    b.Property<int>("MpID");

                    b.HasKey("Id");

                    b.ToTable("MpMediaImageTypes");
                });

            modelBuilder.Entity("Pb.Wechat.MpMediaVideos.MpMediaVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Description");

                    b.Property<string>("FileID");

                    b.Property<string>("FilePathOrUrl")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("MediaID");

                    b.Property<int>("MpID");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("MpMediaVideos");
                });

            modelBuilder.Entity("Pb.Wechat.MpMediaVoices.MpMediaVoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Description");

                    b.Property<string>("FileID");

                    b.Property<string>("FilePathOrUrl")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("MediaID");

                    b.Property<int>("MpID");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("MpMediaVoices");
                });

            modelBuilder.Entity("Pb.Wechat.MpMenus.MpMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ArticleGroupID");

                    b.Property<string>("ArticleGroupMediaID");

                    b.Property<string>("ArticleGroupName");

                    b.Property<int?>("ArticleID");

                    b.Property<string>("ArticleMediaID");

                    b.Property<string>("ArticleName");

                    b.Property<int?>("ChildCount");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("FullPath");

                    b.Property<string>("GetOpenID");

                    b.Property<int?>("ImageID");

                    b.Property<string>("ImageMediaID");

                    b.Property<string>("ImageName");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("Length");

                    b.Property<string>("LinkUrl");

                    b.Property<string>("MediaType");

                    b.Property<string>("MenuFullPath");

                    b.Property<string>("MenuKey");

                    b.Property<int>("MpID");

                    b.Property<string>("Name");

                    b.Property<int>("ParentID");

                    b.Property<int?>("SortIndex");

                    b.Property<string>("Type");

                    b.Property<int?>("VideoID");

                    b.Property<string>("VideoMediaID");

                    b.Property<string>("VideoName");

                    b.Property<int?>("VoiceID");

                    b.Property<string>("VoiceMediaID");

                    b.Property<string>("VoiceName");

                    b.HasKey("Id");

                    b.ToTable("MpMenus");
                });

            modelBuilder.Entity("Pb.Wechat.MpMessages.MpMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ArticleGroupID");

                    b.Property<string>("ArticleGroupMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("ArticleGroupName")
                        .HasMaxLength(500);

                    b.Property<int?>("ArticleID");

                    b.Property<string>("ArticleMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("ArticleName")
                        .HasMaxLength(500);

                    b.Property<int>("BaySex");

                    b.Property<DateTime>("BeginBabyBirthday");

                    b.Property<int>("BeginPointsBalance");

                    b.Property<string>("ChannelID");

                    b.Property<string>("ChannelName");

                    b.Property<string>("City");

                    b.Property<string>("Content");

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime>("EndBabyBirthday");

                    b.Property<int>("EndPointsBalance");

                    b.Property<DateTime?>("ExecTaskTime");

                    b.Property<long?>("FailCount");

                    b.Property<DateTime?>("FinishDate");

                    b.Property<string>("FirstLevelGroup");

                    b.Property<int?>("GroupID");

                    b.Property<string>("GroupName");

                    b.Property<int?>("ImageID");

                    b.Property<string>("ImageMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("ImageName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("IsMember");

                    b.Property<int>("IsTask");

                    b.Property<string>("LastBuyProduct");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("MemberCategory");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MotherType");

                    b.Property<int>("MpID");

                    b.Property<string>("OfficialCity");

                    b.Property<string>("OrganizeCity");

                    b.Property<string>("Province");

                    b.Property<long?>("SendCount");

                    b.Property<int>("SendState");

                    b.Property<string>("Sex");

                    b.Property<string>("State");

                    b.Property<long?>("SuccessCount");

                    b.Property<string>("TargetID");

                    b.Property<string>("TargetName");

                    b.Property<int?>("VideoID");

                    b.Property<string>("VideoMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("VideoName")
                        .HasMaxLength(500);

                    b.Property<int?>("VoiceID");

                    b.Property<string>("VoiceMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("VoiceName")
                        .HasMaxLength(500);

                    b.Property<string>("WxMsgID");

                    b.HasKey("Id");

                    b.ToTable("MpMessages");
                });

            modelBuilder.Entity("Pb.Wechat.MpSecondKeyWordReplys.MpSecondKeyWordReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ArticleGroupID");

                    b.Property<string>("ArticleGroupMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("ArticleGroupName")
                        .HasMaxLength(500);

                    b.Property<int?>("ArticleID");

                    b.Property<string>("ArticleMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("ArticleName")
                        .HasMaxLength(500);

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("ImageID");

                    b.Property<string>("ImageMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("ImageName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("KeyWord")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MpID");

                    b.Property<int>("ParentId");

                    b.Property<string>("ReplyType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("VideoID");

                    b.Property<string>("VideoMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("VideoName")
                        .HasMaxLength(500);

                    b.Property<int?>("VoiceID");

                    b.Property<string>("VoiceMediaID")
                        .HasMaxLength(200);

                    b.Property<string>("VoiceName")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("KeyWord", "ParentId");

                    b.ToTable("MpSecondKeyWordReplys");
                });

            modelBuilder.Entity("Pb.Wechat.MpSelfArticleGroupItems.MpSelfArticleGroupItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArticleID");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("GroupID");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MpID");

                    b.Property<int?>("SortIndex");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("MpSelfArticleGroupItems");
                });

            modelBuilder.Entity("Pb.Wechat.MpSelfArticleGroups.MpSelfArticleGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MpID");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("MpSelfArticleGroups");
                });

            modelBuilder.Entity("Pb.Wechat.MpSelfArticles.MpSelfArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AUrl");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Description");

                    b.Property<string>("FilePathOrUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MpID");

                    b.Property<string>("PicFileID");

                    b.Property<string>("PicMediaID");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("MpSelfArticles");
                });

            modelBuilder.Entity("Pb.Wechat.MpShoppingMallPics.MpShoppingMallPic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LinkUrl");

                    b.Property<string>("LocalPicPath");

                    b.Property<string>("LocalPicUrl");

                    b.Property<int>("MpID");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("MpShoppingMallPics");
                });

            modelBuilder.Entity("Pb.Wechat.MpUserMembers.MpUserMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActiveDate");

                    b.Property<string>("Address");

                    b.Property<string>("Area");

                    b.Property<string>("Atts");

                    b.Property<DateTime?>("BabyBirthday");

                    b.Property<string>("BabyName")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("BindingTime");

                    b.Property<int?>("CRMID");

                    b.Property<Guid?>("CRMUserID");

                    b.Property<int>("ChannelID");

                    b.Property<string>("ChannelName")
                        .HasMaxLength(500);

                    b.Property<string>("City");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("DayConsumption");

                    b.Property<string>("Email")
                        .HasMaxLength(150);

                    b.Property<bool?>("EmailVerifyFlag");

                    b.Property<int?>("FeedingMode");

                    b.Property<string>("Hobby");

                    b.Property<int?>("HomeRole");

                    b.Property<bool>("IsBinding");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LikeChannel");

                    b.Property<string>("MemberIdentity");

                    b.Property<string>("MemberName")
                        .HasMaxLength(100);

                    b.Property<string>("MemberPassword")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MemberState")
                        .HasMaxLength(50);

                    b.Property<int?>("MemberType");

                    b.Property<string>("MemeberUserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MgccAuthkey")
                        .HasMaxLength(50);

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(50);

                    b.Property<decimal?>("MonthConsumption");

                    b.Property<int?>("OfficialCity");

                    b.Property<string>("OpenID")
                        .HasMaxLength(50);

                    b.Property<string>("Province");

                    b.Property<string>("RegistProduct");

                    b.Property<string>("RegistProductName");

                    b.Property<DateTime?>("RegisterTime");

                    b.Property<int?>("ServiceChannel");

                    b.Property<string>("ServiceShop");

                    b.Property<string>("ServiceShopCode");

                    b.Property<int?>("Sex");

                    b.Property<string>("Street");

                    b.Property<DateTime?>("SubscribeTime");

                    b.Property<string>("UnionID");

                    b.Property<int?>("UsedBrand");

                    b.HasKey("Id");

                    b.ToTable("MpUserMembers");
                });

            modelBuilder.Entity("Pb.Wechat.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("DayCount");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("EditionId");

                    b.Property<int>("Gateway");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("PaymentId");

                    b.Property<int?>("PaymentPeriodType");

                    b.Property<int>("Status");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EditionId");

                    b.HasIndex("PaymentId", "Gateway");

                    b.HasIndex("Status", "CreationTime");

                    b.ToTable("AppSubscriptionPayments");
                });

            modelBuilder.Entity("Pb.Wechat.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<Guid?>("CustomCssId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("EditionId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsInTrialPeriod");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LogoFileType")
                        .HasMaxLength(64);

                    b.Property<Guid?>("LogoId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("SubscriptionEndDateUtc");

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreationTime");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SubscriptionEndDateUtc");

                    b.HasIndex("TenancyName");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("Pb.Wechat.Storage.BinaryObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Bytes")
                        .IsRequired();

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AppBinaryObjects");
                });

            modelBuilder.Entity("Pb.Wechat.UserMps.UserMp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("CurrentMpID");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("UserMps");
                });

            modelBuilder.Entity("Pb.Wechat.YiliLastBuyProducts.YiliLastBuyProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("YiliLastBuyProducts");
                });

            modelBuilder.Entity("Pb.Wechat.YiliMemberTypes.YiliMemberType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("YiliMemberTypes");
                });

            modelBuilder.Entity("Pb.Wechat.YiliOfficialCitys.YiliOfficialCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Code");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.Property<int>("ParentCode");

                    b.HasKey("Id");

                    b.ToTable("YiliOfficialCitys");
                });

            modelBuilder.Entity("Pb.Wechat.YiliOrganizeCitys.YiliOrganizeCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Code");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.Property<int>("ParentCode");

                    b.HasKey("Id");

                    b.ToTable("YiliOrganizeCitys");
                });

            modelBuilder.Entity("Pb.Wechat.Editions.SubscribableEdition", b =>
                {
                    b.HasBaseType("Abp.Application.Editions.Edition");

                    b.Property<decimal?>("AnnualPrice");

                    b.Property<int?>("ExpiringEditionId");

                    b.Property<decimal?>("MonthlyPrice");

                    b.Property<int?>("TrialDayCount");

                    b.Property<int?>("WaitingDayAfterExpire");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator().HasValue("SubscribableEdition");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("TenantId");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("Pb.Wechat.Authorization.Roles.Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("Pb.Wechat.Authorization.Users.User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("Pb.Wechat.Authorization.Users.User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("Pb.Wechat.Authorization.Users.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("Pb.Wechat.Authorization.Users.User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("Pb.Wechat.Authorization.Users.User")
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Pb.Wechat.Authorization.Roles.Role", b =>
                {
                    b.HasOne("Pb.Wechat.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Pb.Wechat.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Pb.Wechat.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Pb.Wechat.Authorization.Users.User", b =>
                {
                    b.HasOne("Pb.Wechat.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Pb.Wechat.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Pb.Wechat.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Pb.Wechat.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pb.Wechat.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("Pb.Wechat.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Pb.Wechat.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("Pb.Wechat.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("Pb.Wechat.Authorization.Roles.Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("Pb.Wechat.Authorization.Users.User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
